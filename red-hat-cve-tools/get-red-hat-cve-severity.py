"""
  This script will load a file that contains a list of CVEs and then query 
  the Red Hat API to retrieve CVE data. It will then output a comma seperated
  list of CVE and Red Hat Severity to STDOUT.

  When the Red Hat API returns a 404 HTTP Response Code, the Severity will be 
  reported as "Not Found".

  When the Red Hat CVE data does not have a defined Severity, the Severity will
  be reported as "Undefined".

  To save the output to a file, redirect the STDOUT to a file with "> output.txt".

  Reference: https://access.redhat.com/documentation/en-us/red_hat_security_data_api/1.0/html/red_hat_security_data_api/cve#retrieve_a_cve

  Author: Kendall Adkins
  Date May 9th, 2024
  Modified May 30th, 2024
"""

import argparse
import logging
import sys
import os.path
import requests
import json

# Setup logger
LOG = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s.%(msecs)03d %(levelname)s - %(funcName)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

# Track number of http response codes
num_of_429 = 0
num_of_504 = 0

# Define custom exceptions
class UnexpectedHTTPResponse(Exception):
    """Used when recieving an unexpected HTTP response"""

def _parse_args():

    args = None

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "--cve_list",
        required=True,
        type=str,
        action="store",
        help="The CVE list file name",
    )
    return parser.parse_args()

def main():

    try:

        # Parse the command line arguments
        args = _parse_args()
        cve_list_file_name = args.cve_list

        # Validate that the cve list file exists
        if not os.path.isfile(cve_list_file_name):
            LOG.error(f"ERROR: The cve list file {cve_list_file_name} is missing!")
            raise SystemExit(-1)

        # Load the cve list
        cve_list = _load_cve_list(cve_list_file_name)

        # Retrieve the Red Hat CVE severity
        LOG.info('Retrieving the Red Hat CVE severities.')
        for cve in cve_list:
          redhat_cve_data = _get_redhat_cve_data(cve)


          #print(f"{redhat_cve_data}")

          # Getting to the embedded LOW
          #cpe_list = json.loads(redhat_cve_data["data"]["field_cve_releases_txt"]["value"])
          #for cpe in cpe_list:
          #    #print(x)
          #    if "openshift" in cpe["product"].lower():
          #        print("{}, {}, {}, {}, {}".format(cpe["cpe"],
          #            cpe["product"],
          #            cpe["package"],
          #            cpe["state"],
          #            cpe.get("impact", "")))
                  
          redhat_cve_severity = redhat_cve_data["data"]["field_cve_threat_severity_text"]
          if redhat_cve_severity == []:
              redhat_cve_severity = "Undefined"
          elif redhat_cve_severity == "404":
              redhat_cve_severity = "Not Found"
          print(f"{cve},{redhat_cve_severity}")

        LOG.info('Request for Red Hat CVE data succeeded.')

    except Exception as e:
        LOG.critical(e)
        LOG.error(f'Request to get Red Hat CVE data failed.')
        raise SystemExit(-1)

def _load_cve_list(cve_list_file_name):

    cve_list = []

    with open(cve_list_file_name, 'r') as cve_list_file:
        for line in cve_list_file:
            line = line.strip()
            cve_list.append(line)

    return cve_list

def _get_redhat_cve_data(cve):

    api_url = f"https://access.redhat.com/api/v2/security/cve/{cve}.json"
    response_data = _get_data_from_http_request(api_url)

    return response_data
        
def _get_data_from_http_request(url):

    try:

        global num_of_429
        global num_of_504
        response_data = None

        while True:

            LOG.debug(f"Sending http request to: {url}")

            response = requests.get(url)
            response_data = response.json()

            LOG.debug(f"Response status: {response.status_code}")

            if response.status_code == 200:
                #LOG.debug(f"Response data: {response_data}")
                break

            elif response.status_code in [ 429, 504 ]:

                if response.status_code == 429:
                    message = "API throttling"
                    num_of_429 += 1
                elif response.status_code == 504:
                    message = "Gateway Timeout"
                    num_of_504 += 1

                LOG.debug(f"Response data: {response_data}")
                LOG.debug(f"Sleeping 60 seconds due to {message}...")

                for interval in range(1,60):
                   print(f"Sleeping {60-interval} seconds due to {message}...", end="\r")
                   time.sleep(1)

                # Extra space to clear earlier message
                print( "Retrying request...                                    ", end="\r")

                LOG.debug(f"Retrying request...")

            elif response.status_code == 404:

                response_data = { "data": { "field_cve_threat_severity_text": "404" } }
                break

            else:
                raise UnexpectedHTTPResponse(
                    f"Unexpected HTTP response status: {response.status_code}"
                )

        return response_data

    except Exception as e:
        LOG.critical(e)
        LOG.critical(f"Error while requesting url: {url}")
        raise SystemExit(-1)

if __name__ == "__main__":
    sys.exit(main())
